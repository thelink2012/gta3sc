---

# We enable as many checks as possible. For every disabled check, a reason must
# be given below.
#
# The checks under THE_FOLLOWING_NEEDS_TO_BE_REVISITED are disabled due to
# updating clang-tidy 4 years forward and these rules being introduced.
# They need to be revisited to see if they are useful for this codebase.
#
# A list of checks can be found at
# https://clang.llvm.org/extra/clang-tidy/checks/list.html
#
# List of disabled checks:
#
#   android-cloexec-*
#       Requires non portable code.
#
#   altera-*
#       Specific to Altera coding standards.
#
#   fuchsia-*
#       Too much strict and sometimes conflicts with modernize checks.
#
#   llvmlibc-*
#       Specific to LLVM libc coding standards.
#
#   cert-dcl21-cpp
#       Bad advice in Modern C++ [https://stackoverflow.com/a/16835004/2679626].
#
#   readability-else-after-return
#   llvm-else-after-return
#       Ends up converting else-if chains into plain ifs in case the previous
#       body ends in a return. This hurts readability more than it helps.
#       Otherwise, the purpose of the check is fair (reduce identation levels).
#
#   readability-redundant-access-specifiers
#       Redundant access specifiers are used to separate member variables from
#       member functions in the coding style of this codebase.
#
#   readability-redundant-declaration
#       Necessary to provide friendship to a function in another namespace.
#
#   readability-magic-numbers
#   cppcoreguidelines-avoid-magic-numbers
#       Too aggressive and flags too many literals as magic numbers.
#
#   readability-convert-member-functions-to-static
#       Some member functions are non-static by design.
#
#   readability-braces-around-statements
#   hicpp-braces-around-statements
#   google-readability-braces-around-statements
#       This is a good recommendation, but unfortunately doesn't fit very well
#       on the coding style (opening brace on a new line) of this codebase.
#
#   readability-qualified-auto
#   llvm-qualified-auto
#       Would be useful if `std::string_view::iterator` wasn't implemented
#       as an alias to `const char*` in libstdc++ and libc++.
#
#   readability-implicit-bool-conversion
#       Conflicts with cppcoreguidelines (ES.87) which we choose to follow.
#
#   google-runtime-references
#       Conflicts with cppcoreguidelines (F.15) which we choose to follow.
#
#   google-readability-todo
#       Google TODOs are very nice. Unfortunately, they don't fit
#       too well outside of their ecosystem (how to specify bug id?).
#       Maybe this can be revisited in the future.
#
#   llvm-header-guard
#       In `#pragma once` we trust, but we may revisit this in the future.
#
#   cppcoreguidelines-pro-bounds-array-to-pointer-decay
#   hicpp-no-array-decay
#       Would be useful if it didn't flag every `assert`.
#
#   cppcoreguidelines-pro-bounds-pointer-arithmetic
#       Would be useful if `std::string_view::iterator` wasn't implemented
#       as an alias to `const char*` in libstdc++ and libc++.
#
#   cppcoreguidelines-avoid-c-arrays
#   hicpp-avoid-c-arrays
#   modernize-avoid-c-arrays
#       Sometimes they are practical without the need of a standard library
#       header.
#
#   cppcoreguidelines-pro-bounds-constant-array-index
#       The alternative is calling `gsl::at` for every indexing operation.
#       That doesn't look quite good.
#
#   cppcoreguidelines-owning-memory
#       Would be useful if the owning type could be customized. That is,
#       instead of looking for `gsl::owner`, it could look for e.g.
#       `gta3sc::util::ArenaPtr`.
#
#

Checks: '
        ,*,
        ,-android-cloexec-*,
        ,-altera-*,
        ,-cert-dcl21-cpp,
        ,-cppcoreguidelines-pro-bounds-array-to-pointer-decay,
        ,-cppcoreguidelines-avoid-magic-numbers,
        ,-cppcoreguidelines-pro-bounds-pointer-arithmetic,
        ,-cppcoreguidelines-owning-memory,
        ,-cppcoreguidelines-avoid-c-arrays,
        ,-cppcoreguidelines-pro-bounds-constant-array-index,
        ,-fuchsia-*,
        ,-google-readability-braces-around-statements,
        ,-google-runtime-references,
        ,-google-readability-todo,
        ,-hicpp-braces-around-statements,
        ,-hicpp-no-array-decay,
        ,-hicpp-avoid-c-arrays,
        ,-llvm-qualified-auto,
        ,-llvm-header-guard,
        ,-llvm-else-after-return,
        ,-llvmlibc-*,
        ,-modernize-avoid-c-arrays,
        ,-readability-braces-around-statements,
        ,-readability-redundant-access-specifiers,
        ,-readability-else-after-return,
        ,-readability-magic-numbers,
        ,-readability-convert-member-functions-to-static,
        ,-readability-implicit-bool-conversion,
        ,-readability-redundant-declaration,
        ,-readability-qualified-auto,
        ,THE_FOLLOWING_NEEDS_TO_BE_REVISITED,
        ,-bugprone-easily-swappable-parameters,
        ,-bugprone-narrowing-conversions,
        ,-bugprone-unchecked-optional-access,
        ,-bugprone-optional-value-conversion,
        ,-bugprone-exception-escape,
        ,-cert-dcl58-cpp,
        ,-clang-diagnostic-c++11-narrowing,
        ,-cppcoreguidelines-narrowing-conversions,
        ,-cppcoreguidelines-rvalue-reference-param-not-moved,
        ,-cppcoreguidelines-avoid-do-while,
        ,-misc-include-cleaner,
        ,-misc-no-recursion,
        ,-misc-use-anonymous-namespace,
        ,-modernize-use-constraints,
        ,-modernize-return-braced-init-list,
        ,-readability-identifier-length,
        ,-readability-function-cognitive-complexity,
        ,-google-readability-function-size,-hicpp-function-size,-readability-function-size,
        '

WarningsAsErrors: '*'

CheckOptions:    
  - key:             misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic
    value:           1
  - key:             readability-identifier-naming.UnionCase
    value:           CamelCase
  - key:             readability-identifier-naming.EnumCase
    value:           CamelCase
  - key:             readability-identifier-naming.ClassCase
    value:           CamelCase
  - key:             readability-identifier-naming.TypeAliasCase
    value:           aNy_CasE  # interoperability with concepts
#  - key:             readability-identifier-naming.TemplateParameterCase
#    value:           CamelCase
  - key:             readability-identifier-naming.NamespaceCase
    value:           lower_case
  - key:             readability-identifier-naming.FunctionCase
    value:           lower_case
  - key:             readability-identifier-naming.MemberCase
    value:           lower_case
  - key:             readability-identifier-naming.ParameterCase
    value:           lower_case
  - key:             readability-identifier-naming.VariableCase
    value:           lower_case
  - key:             readability-identifier-naming.ConstantCase
    value:           lower_case

HeaderFilterRegex: '\/include\/gta3sc\/.*|\/lib\/.*|\/src\/.*|\/unittest\/.*'
FormatStyle: file

# Eggs.Variant
#
# Copyright Agustin K-ballo Berge, Fusion Fenix 2014-2018
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

add_library(Catch2 OBJECT catch.cpp)

set(_tests
  apply
  assign.conversion
  assign.copy
  assign.emplace
  assign.move
  cnstr.conversion
  cnstr.copy
  cnstr.default
  cnstr.emplace
  cnstr.move
  dtor
  elem.get
  elem.get_if
  hash
  helper
  in_place
  obs.bool
  obs.target
  obs.target_type
  obs.which
  rel.equality
  rel.order
  swap)
foreach (_test ${_tests})
  add_executable(test.${_test} ${_test}.cpp $<TARGET_OBJECTS:Catch2>)
  target_link_libraries(test.${_test} Eggs::Variant)

  add_test(NAME test.${_test} COMMAND test.${_test})
endforeach()

# Test for leaked configuration macros
set(_contents "// This file is auto-generated by CMake to test for multiple definition errors.\n")

set(_config_macros
  cxx11_has_constexpr
  cxx11_constexpr
  cxx11_static_constexpr
  cxx14_has_constexpr
  cxx14_constexpr
  cxx98_has_rtti
  cxx11_has_constexpr_rtti
  cxx98_has_exceptions
  cxx11_noreturn
  cxx11_has_sfinae_for_expressions
  cxx14_has_variable_templates
  cxx17_has_inline_variables
  cxx17_inline
  cxx17_std_has_constexpr_addressof
  cxx11_std_has_is_nothrow_traits
  cxx17_std_has_swappable_traits
  cxx11_std_has_is_trivially_copyable
  cxx11_std_has_is_trivially_destructible)
foreach (_config_macro ${_config_macros})
  string(TOUPPER "${_config_macro}" _config_macro)
  set(_contents_prefix "${_contents_prefix}#if defined(EGGS_${_config_macro})\n")
  set(_contents_prefix "${_contents_prefix}#  define ${_config_macro}_DEFINED\n")
  set(_contents_prefix "${_contents_prefix}#endif\n")
  set(_contents_suffix "${_contents_suffix}#if !defined(${_config_macro}_DEFINED)\n")
  set(_contents_suffix "${_contents_suffix}#if defined(EGGS_${_config_macro}) || defined(EGGS_${_config_macro}_DEFINED)\n")
  set(_contents_suffix "${_contents_suffix}#    error EGGS_${_config_macro} leaked\n")
  set(_contents_suffix "${_contents_suffix}#  endif\n")
  set(_contents_suffix "${_contents_suffix}#endif\n")
endforeach()

set(_source "${CMAKE_CURRENT_BINARY_DIR}/leaked_config_macros.cpp")
set(_contents "${_contents_prefix}#include <eggs/variant.hpp>\n${_contents_suffix}")
file(WRITE "${_source}" "${_contents}int main() {}\n")

add_executable(test.leaked_config_macros "${_source}")
target_link_libraries(test.leaked_config_macros Eggs::Variant)
add_test(NAME test.leaked_config_macros COMMAND test.leaked_config_macros)

# Test for multiple definition errors
set(_contents "// This file is auto-generated by CMake to test for multiple definition errors.\n")

file(GLOB_RECURSE _headers
  RELATIVE "${PROJECT_SOURCE_DIR}/include"
  "${PROJECT_SOURCE_DIR}/include/*.hpp")
foreach (_header ${_headers})
  set(_contents "${_contents}#include <${_header}>\n")
endforeach()

set(_source_one "${CMAKE_CURRENT_BINARY_DIR}/multiple_definitions.one.cpp")
file(WRITE "${_source_one}" "${_contents}int main() {}\n")

set(_source_two "${CMAKE_CURRENT_BINARY_DIR}/multiple_definitions.two.cpp")
file(WRITE "${_source_two}" "${_contents}")

add_executable(test.multiple_definitions "${_source_one}" "${_source_two}")
target_link_libraries(test.multiple_definitions Eggs::Variant)
add_test(NAME test.multiple_definitions COMMAND test.multiple_definitions)
